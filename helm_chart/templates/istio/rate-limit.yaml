# Local rate limiting using Envoy's built-in filter
{{- if .Values.rateLimit.enabled}}
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: {{ printf "%s-%s" .Release.Name .Values.rateLimit.name }}
  namespace: {{ .Values.rateLimit.namespace }}
spec:
  workloadSelector:
    labels:
      istio: {{ .Values.rateLimit.selector.istio }}
  configPatches:

    # Get source IP 
    - applyTo: HTTP_FILTER
      match:
        context: GATEWAY
        listener:
          portNumber: {{ .Values.rateLimit.portNumber }}
          filterChain:
            filter:
              name: "envoy.filters.network.http_connection_manager"
              subFilter:
                name: "envoy.filters.http.router"
      patch:
        operation: INSERT_BEFORE
        value:
          name: envoy.filters.http.lua
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua 
            inline code: |
              function envoy_on_request(request_handle)
                -- Extract the source IP and add it as a header for rate limiting
                local headers = request_handle:headers()
                local source_ip = request_handle:streamInfo():downstreamRemoteAddress():ip()
                headers:add("x-user-ip", source_ip)
              end
    
    # Actually apply local rate limiter
    - applyTo: HTTP_FILTER
      match:
        context: GATEWAY
        listener:
          filterChain:
            filter:
              name: "envoy.filters.network.http_connection_manager"
              subFilter:
                name: "envoy.filters.http.lua"
      patch:
        operation: INSERT_AFTER
        value:
          name: envoy.filters.http.local_ratelimit
          typed_config:
            "@type": type.googleapis.com/udpa.type.v1.TypedStruct
            type_url: type.googleapis.com/envoy.extensions.filters.http.local_ratelimit.v3.LocalRateLimit
            value:
              stat_prefix: {{ printf "%s-%s" .Release.Name .Values.rateLimit.statPrefix }}
              token_bucket:
                max_tokens: {{ .Values.rateLimit.maxTokens }}
                tokens_per_fill: {{ .Values.rateLimit.tokensPerFill }}
                fill_interval: {{ .Values.rateLimit.fillInterval }}
              filter_enabled:
                runtime_key: {{ .Values.rateLimit.runtimeKeys.enabled }}
                default_value:
                  numerator: {{ .Values.rateLimit.defaultValue.numerator }}
                  denominator: {{ .Values.rateLimit.defaultValue.denominator }}
              filter_enforced:
                runtime_key: {{ .Values.rateLimit.runtimeKeys.enforced }}
                default_value:
                  numerator: {{ .Values.rateLimit.defaultValue.numerator }}
                  denominator: {{ .Values.rateLimit.defaultValue.denominator }}
              
              # Seperate rate limiter per IP
              descriptors:
                - entries:
                    - key: "user_ip"
                      request_headers:
                        header_name: "x-user-ip"
                        descriptor_key: "user_ip"
                  token_bucket:
                    max_tokens: {{ .Values.rateLimit.requestsPerMinute }}
                    tokens_per_fill: {{ .Values.rateLimit.requestsPerMinute }}
                    fill_interval: {{ .Values.rateLimit.fillInterval }}

              response_headers_to_add:
                - append: false
                  header:
                    key: {{ .Values.rateLimit.responseHeader.key }}
                    value: {{ .Values.rateLimit.responseHeader.value | quote }}

              local_reply_config:
                status_code: 429

{{- end }}
  