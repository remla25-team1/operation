# playbooks/general.yaml
- hosts: all
  # connection: local
  become: true
  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install dependencies
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
        state: present

    # step 4
    - name: Register public SSH keys for passwordless login
      block:
        - name: Ensure the SSH directory exists
          file:
            path: /home/vagrant/.ssh
            state: directory
            owner: vagrant
            group: vagrant
            mode: '0700'

        - name: Add team members' public SSH keys to authorized_keys
          authorized_key:
            user: vagrant
            state: present
            key: "{{ lookup('file', item) }}"
          with_fileglob:
            - "{{ playbook_dir }}/../ssh_keys/*.pub"

    # step 5
    - name: Disable swap for Kubernetes
      block:
        - name: Disable swap for the running system
          ansible.builtin.shell: swapoff -a

        - name: Remove swap entry from /etc/fstab
          ansible.builtin.lineinfile:
            path: /etc/fstab
            regexp: '^\s*[^#]+\s+swap\s+'
            state: absent

        - name: Ensure swap is disabled
          ansible.builtin.command: free -h
          register: memory_status

        - name: Print memory status
          ansible.builtin.debug:
            var: memory_status.stdout_lines

    # step 6
    - name: Enable br_netfilter for Kubernetes
      block:
        - name: Ensure the modules-load.d directory exists
          file:
            path: /etc/modules-load.d
            state: directory
            owner: root
            group: root
            mode: '0755'

        - name: Create /etc/modules-load.d/k8s.conf to load overlay and br_netfilter
          copy:
            dest: /etc/modules-load.d/k8s.conf
            content: |
              overlay
              br_netfilter
            owner: root
            group: root
            mode: '0644'

        - name: Load the br_netfilter module
          modprobe:
            name: br_netfilter
            state: present

        - name: Load the overlay module
          modprobe:
            name: overlay
            state: present

        - name: Ensure br_netfilter sysctl settings are enabled
          sysctl:
            name: net.bridge.bridge-nf-call-iptables
            value: 1
            state: present
            sysctl_set: yes
            reload: yes

        - name: Ensure br_netfilter sysctl settings for IPv6 are enabled
          sysctl:
            name: net.bridge.bridge-nf-call-ip6tables
            value: 1
            state: present
            sysctl_set: yes
            reload: yes

    # step 7
    - name: Enable IPv4 forwarding and configure kernel properties
      block:
        - name: Enable IPv4 forwarding
          sysctl:
            name: net.ipv4.ip_forward
            value: 1
            state: present
            sysctl_set: yes
            reload: yes

        - name: Enable net.bridge ip tables
          sysctl:
            name: net.bridge.bridge-nf-call-iptables
            value: 1
            state: present
            sysctl_set: yes
            reload: yes
        - name: Enable net.bridge ip6tables
          sysctl:
              name: net.bridge.bridge-nf-call-ip6tables
              value: 1
              state: present
              sysctl_set: yes
              reload: yes

    # step 8
    - name: Append to /etc/hosts file from template
      blockinfile:
        path: /etc/hosts
        block: |
          {% raw %}
          # Kubernetes cluster hosts
          {{ ctrl_ip }}   k8s-ctrl
          {% for i in range(1, worker_count + 1) %}
          {{ cluster_network }}.{{ 100 + i }}   k8s-node-{{ i }}
          {% endfor %}
          {% endraw %}
      when: ctrl_ip is defined and worker_count is defined and cluster_network is defined

    # step 9
    - name: Add Kubernetes GPG key
      ansible.builtin.apt_key:
        url: https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key
        keyring: /usr/share/keyrings/kubernetes-archive-keyring.gpg
        state: present

    - name: Add Kubernetes apt repo
      ansible.builtin.apt_repository:
        repo: "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /"
        state: present
        filename: kubernetes
        update_cache: yes

    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: yes
    
    # step 10
    - name: Install kubelet, kubeadm and kubectl
      ansible.builtin.apt:
        name:
          - containerd #=1.7.24-1
          - runc #=1.1.12-0ubuntu1
          - kubelet #=1.32.4-00
          - kubeadm #=1.32.4-00
          - kubectl #=1.32.4-00
        state: present
        update_cache: yes

    # step 11
    - name: Ensure /etc/containerd directory exists
      ansible.builtin.file:
        path: /etc/containerd
        state: directory
        mode: "0755"

    - name: Generate default containerd config
      ansible.builtin.shell: >
        containerd config default > /etc/containerd/config.toml
      args:
        creates: /etc/containerd/config.toml

    - name: Disable AppArmor
      ansible.builtin.lineinfile:
        path: /etc/containerd/config.toml
        regexp: '^\s*disable_apparmor\s*=.*'
        line: "    disable_apparmor = true"
        backrefs: false

    - name: Update version of the sandbox image
      ansible.builtin.lineinfile:
        path: /etc/containerd/config.toml
        regexp: '^\s*sandbox_image\s*=.*'
        line: '    sandbox_image = "registry.k8s.io/pause:3.10"'
        backrefs: false

    - name: Enable SystemdCgroup
      ansible.builtin.lineinfile:
        path: /etc/containerd/config.toml
        regexp: '^\s*SystemdCgroup\s*=.*'
        line: "      SystemdCgroup = true"
        backrefs: false

    - name: Start service httpd, if not started
      ansible.builtin.service:
        name: containerd
        state: restarted

    # step 12
    - name: Start and enable kubelet service on all nodes
      ansible.builtin.service:
        name: kubelet
        state: started
        enabled: yes

    - name: List all Ansible hosts
      ansible.builtin.debug:
        msg: "{{ groups['all'] }}"